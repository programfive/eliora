// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM

  @@map("message_roles")
}

model User {
  id                  String               @id @default(uuid())
  clerkId             String               @unique
  name                String?
  career              String?
  birthDate           DateTime?
  gender              String?
  chats               Chat[]
  sessions            UserSession[]
  satisfactionRatings SatisfactionRating[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@map("users")
}

model UserSession {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_sessions")
}

model Chat {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  

  title String?

  emotion String?

  messageCount Int @default(0)

  satisfactionRating SatisfactionRating?

  isActive   Boolean @default(true)
  isArchived Boolean @default(false)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chats")
}

model Message {
  id     String @id @default(uuid())
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  content String
  role    MessageRole // user, assistant, system

  wordCount Int @default(0) // cantidad de palabras del mensaje

  createdAt DateTime @default(now())

  @@map("messages")
}

model SatisfactionRating {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId String @unique
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  overallRating     Int
  helpfulnessRating Int
  empathyRating     Int
  clarityRating     Int

  feedback       String?
  wouldRecommend Boolean?

  createdAt DateTime @default(now())

  @@map("satisfaction_ratings")
}

// Remover modelos antiguos si existen
// model Entrance - ya no es necesario con el nuevo esquema
// model DetalleChat - reemplazado por Message
