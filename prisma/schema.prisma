// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  clerkId     String   @unique @db.VarChar(255)
  isFirstTime Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ingresos    Ingreso[]
  
  @@map("users")
}

model Ingreso {
  id        Int      @id @default(autoincrement())
  userId    Int
  fecha     DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats     IngresoChat[]  
  
  @@map("ingresos")
}

model Chat {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  timestamp DateTime @default(now())
  isVisible Boolean  @default(true)
  sentiment String?  @db.VarChar(20) 
  category  String?  @db.VarChar(50) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  ingresos  IngresoChat[]
  
  @@map("chats")
}

model IngresoChat {
  id        Int      @id @default(autoincrement())
  ingresoId Int
  chatId    Int
  createdAt DateTime @default(now())
  

  ingreso   Ingreso  @relation(fields: [ingresoId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  

  @@unique([ingresoId, chatId])
  @@map("ingreso_chat")
}